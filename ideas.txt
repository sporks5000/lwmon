
Things I would need for a web interface:

* There would need to be a configuration option for a directory to dump data to be interpreted by the site
* Would also need to be able to configure a user and group for the owner
* Should probably be handled entirely through child processes
* As the child processes start, they create a directory to put web data in - the existance of that directory is interpreted by php code to understand that there's an ongoing job
* When the child process ends, it deletes the directory


* The main page should have a list of running jobs, from there a user can select jobs that they want to focus on
    * Each job should be represented by two divs in a larger div. The left one should just contain a checkbox; the right one should contain information about the job and be a link to the job page.
    * The right div should change color depending on whether or not the checkbox is selected
    * There's no reason for the right div to contain anything more than the job name
    * There should be a button at both the top and bottom that lets you go to the secondary page.
* There will be a secondary page that just shows the jobs that the user has selected (maybe these will be saved in session data?). In this view, they will be pulling additional data from the server every 60 seconds in order to update what's shown on the screen. The information here should be similar to the level of information for the "more verbose" output.
    * Every job should be represented by a div within a div.
    * The outter div should be fairly narrow and it's color should represent the percent of successes within the past hour
    * The color of the inner div should represent the percent of recent successes (as defined by the job itself)
    * Clicking anywhere within the inner div should take you to the page for the job
* There should be a page for each job that contains further details about the job
    * Current settings
    * Log entries specific changes in status
    * Log entries specific to durations
    * html results (shown in plain text)
    * curl verbose output


* There will need to be a php script that can be given the list of PID's and return a JSON object with the necessary data from those pids
* lwmon.sh will create a directory in /dev/shm, and then create a directory for each PID in that directory.
    * It will simlink those directories as /.lwmon/[CHILD PID]/shm
    * It will create a symlink in the shm directory for the conf file as well as for each html file it keeps
    * For every check, it will dump data into that directory including
        * Last Success
        * Last Partial
        * Last Failure
        * Total count of successes
        * Total count of partials
        * Total count of failures
        * Count of successes in the past eight hours
        * Count of partials in the past eight hours
        * Count of failures in the past eight hours
        * Count of successes in the past hour
        * Count of partials in the past hour
        * Count of failures in the past hour
        * Count of recent successes
        * Count of recent partials
        * Count of recent failures
        * Total duration
        * Total duration from the past eight hours
        * Total duration from the past hour
        * Total recent duration
        * Current status
