#! /bin/bash

function fn_url_cl {
	### Verify that the correct information was given at the command line
	fn_debug "fn_url_cl"
	if [[ -z "$v_CURL_URL" || -z "${a_CURL_STRING[0]}" ]]; then
		echo "For url jobs, both the \"--url\" and \"--string\" flags require arguments."
		exit 1
	fi
	### If there is an IP address, check to make sure that it's really an IP address, or can be translated into one.
	if [[ -n "$v_IP_ADDRESS" ]]; then
		fn_parse_server "$v_IP_ADDRESS"; v_IP_ADDRESS="$v_IP_ADDRESSa"
		if [[ "$v_IP_ADDRESS" == false ]]; then
			echo "The IP address provided with the \"--ip\" flag is not a valid IP address. Exiting."
			exit 1
		fi
	fi
	fn_parse_server "$v_CURL_URL" "url"; v_CURL_URL="$v_CURL_URLa"
	### If there isn't an IP address, we don't need to specify it in the job name.
	if [[ -z "$v_IP_ADDRESS" || "$v_IP_ADDRESS" == "false" ]]; then
		v_IP_ADDRESS=false
		v_ORIG_JOB_NAME="$v_CURL_URL"
	else
		v_ORIG_JOB_NAME="$v_CURL_URL at $v_IP_ADDRESS"
	fi 
	### Start inputting the values into the params file
	v_JOB_TYPE="url"

	fn_mutual_cl
}

function fn_ping_cl {
	fn_debug "fn_ping_cl"
	### Verify that the correct information was given at the command line
	if [[ -z "$v_DOMAIN" ]]; then
		echo "For ping jobs, the \"--ping\" flag requires an argument."
		exit 1
	fi
	fn_parse_server "$v_DOMAIN"
	if [[ "$v_IP_ADDRESSa" == false ]]; then
		echo "Error: Domain $v_DOMAIN does not appear to resolve. Exiting."
		exit 1
	fi
	v_ORIG_JOB_NAME="$v_DOMAINa"
	v_DOMAIN="$v_DOMAINa"
	v_JOB_TYPE="ping"

	fn_mutual_cl
}

function fn_dns_cl {
	### Verify that the correct information was given at the command line
	fn_debug "fn_dns_cl"
	if [[ -z "$v_DOMAIN" || -z "$v_DNS_CHECK_DOMAIN" ]]; then
		echo "For dns jobs, both the \"--dns\" and \"--domain\" flags require arguments."
		exit 1
	fi
	### Make sure that the domain resolves and is properly formatted
	fn_parse_server "$v_DOMAIN"
	if [[ "$v_IP_ADDRESSa" == false ]]; then
		echo "Error: Domain $v_DOMAIN does not appear to resolve. Exiting."
		exit 1
	fi
	v_DOMAIN="$v_DOMAINa"
	### Make sure that the domain we're digging is properly formatted as well
	fn_parse_server "$v_DNS_CHECK_DOMAIN" "domain"; v_DNS_CHECK_DOMAIN="$v_DOMAINa"
	v_ORIG_JOB_NAME="$v_DNS_CHECK_DOMAIN @$v_DOMAIN"
	v_JOB_TYPE="dns"

	fn_mutual_cl
}

function fn_load_cl {
	### Verify that the correct information was given at the command line
	### We're not going to check for the user here - we'll cover that below once we confirm that the job isn't for localhost
	fn_debug "fn_load_cl"
	if [[ -z "$v_DOMAIN" ]]; then
		echo "For ssh-load jobs, both the \"--ssh-load\" and \"--user\" flags require arguments."
		exit 1
	fi
	fn_parse_server "$v_DOMAIN"
	if [[ "$v_IP_ADDRESSa" == false ]]; then
		echo "Error: Domain $v_DOMAIN does not appear to resolve. Exiting."
		exit 1
	elif [[ "$v_IP_ADDRESSa" != "127.0.0.1" && "$v_IP_ADDRESSa" != "::1" && -z "$v_SSH_USER" ]]; then
	### If it's not for localhost and there is no user, warn and exit.
		echo "For ssh-load jobs, both the \"--ssh-load\" and \"--user\" flags require arguments."
		exit 1
	fi
	v_ORIG_JOB_NAME="$v_DOMAINa"
	v_DOMAIN="$v_DOMAINa"
	if [[ -z "$v_CL_PORT" && "$v_SERVER_PORTa" == "22" ]]; then
		v_SERVER_PORT=22
	elif [[ -n "$v_CL_PORT" ]]; then
		v_SERVER_PORT="$v_CL_PORT"
	elif [[ "$v_SERVER_PORT" != "22" ]]; then
		v_SERVER_PORT="$v_SERVER_PORTa"
	fi
	if [[ ! -e "$( echo "$v_SSH_CONTROL_PATH" | sed "s/%h/$v_DOMAIN/;s/%p/$v_SERVER_PORT/;s/%r/$v_SSH_USER/" )" && "$v_IP_ADDRESSa" != "127.0.0.1" && "$v_IP_ADDRESSa" != "::1" ]]; then
		echo
		echo "There doesn't appear to be an SSH control socket open for this server. Use the following command to SSH into this server (you'll probably want to do this in another window, or a screen), and then try starting the job again:"
		echo
		echo "ssh -o ControlMaster=auto -o ControlPath=\"$v_SSH_CONTROL_PATH\" -p $v_SERVER_PORT $v_SSH_USER@$v_DOMAIN"
		echo
		echo "Be sure to exit out of the master ssh process when you're done monitoring the remote server."
		echo
		exit 1
	fi
	v_JOB_TYPE="ssh-load"

	fn_mutual_cl
}

function fn_mutual_cl {
	fn_debug "fn_mutual_cl"
	v_NEW_JOB="$( date +%s )""_$RANDOM.job"
	f_JOB="$d_WORKING"/"$v_NEW_JOB"
	fn_read_child_params "$f_JOB"

	mv -f "$f_JOB" "$d_WORKING"/"new/$v_NEW_JOB"
	### If this instance is running as master, go on to begin spawning child processes, etc.
	if [[ "$v_RUNNING_STATE" == "master" ]]; then
		source "$d_PROGRAM"/includes/master.shf
		fn_master
	else
		exit 0
	fi
}
