#! /bin/bash

### Global variables set within these functions
f_CONF=
d_WORKING=
v_CURL_BIN=
v_CURL_BIN_VERSION=
v_WGET_BIN=
v_WGET_BIN_VERSION=

### Variables used with fn_parse_server
v_CURL_URLa="false"
v_DOMAINa="false"
v_IP_ADDRESSa="false"
v_SERVER_PORTa="false"

function fn_debug {
### If $b_DEBUG is true, this will output debugging information that does not begin with "fn_"
### If $b_DEBUG_FUNCTIONS is true, the function name for every function will be output every time a function starts
	if [[ "${1:0:3}" != "fn_" ]]; then
		if [[ "$b_DEBUG" == true ]]; then
			echo "$$: $1" > /dev/stderr
		fi
	elif [[ "$b_DEBUG_FUNCTIONS" == true ]]; then
		echo "$$: $1" > /dev/stderr
	fi
}

function fn_start_script {
	fn_debug "fn_start_script"
	f_CONF="$d_PROGRAM"/lwmon.conf
	source "$d_PROGRAM"/includes/variables.shf
	fn_read_master_conf
	### Specify the working directory; create it if not present; specify the log file
	d_WORKING="$d_PROGRAM"/".lwmon"
	mkdir -p "$d_WORKING"

	### find the newst version of curl
	### /usr/bin/curl is the standard installation of curl
	### /opt/curlssl/bin/curl is where cPanel keeps the version of curl that PHP works with, which is usually the most up to date
	v_CURL_BIN=$( echo -e "$( /opt/curlssl/bin/curl --version 2> /dev/null | head -n1 | awk '{print $2}' ) /opt/curlssl/bin/curl\n$( /usr/bin/curl --version 2> /dev/null | head -n1 | awk '{print $2}' ) /usr/bin/curl\n$( $( which curl ) --version 2> /dev/null | head -n1 | awk '{print $2}' ) $( which curl )" | sort -n | grep -E "^[0-9]+\.[0-9]+" | tail -n1 | awk '{print $2}' )
	if [[ -z "$v_CURL_BIN" || "$v_USE_WGET" == "true" ]]; then
		fn_use_wget
	else
		v_CURL_BIN_VERSION="$( "$v_CURL_BIN" --version 2> /dev/null | head -n1 | awk '{print $2}')"
		v_WGET_BIN="false"
	fi
}

function fn_use_wget {
	fn_debug "fn_use_wget"
	v_WGET_BIN="$( which wget 2> /dev/null )"
	if [[ -z "$v_WGET_BIN" ]]; then
		echo "curl or wget needs to be installed for lwmon to perform some of its functions. Exiting."
		exit 1
	fi
	v_WGET_BIN_VERSION="$( wget --version | head -n1 | awk '{print $3}' )"
	v_CURL_BIN="false"
}

function fn_sanitize {
### Given a variable that we're going to run through an egrep, escape all special characters
	local v_OUTPUT="${1//\\/\\\\}"
	v_OUTPUT="${v_OUTPUT//\*/\\*}"
	v_OUTPUT="${v_OUTPUT//\./\\.}"
	v_OUTPUT="${v_OUTPUT//[/\\[}"
	v_OUTPUT="${v_OUTPUT//|/\\|}"
	v_OUTPUT="${v_OUTPUT//\?/\\?}"
	v_OUTPUT="${v_OUTPUT//\(/\\(}"
	v_OUTPUT="${v_OUTPUT//)/\\)}"
	v_OUTPUT="${v_OUTPUT//$/\\$}"
	v_OUTPUT="${v_OUTPUT//+/\\+}"
	v_OUTPUT="${v_OUTPUT//^/\\^}"
	v_OUTPUT="${v_OUTPUT//{/\\{}"
	echo -n "$v_OUTPUT"
}

function fn_parse_server {
### This function assumes that $1 is a URL, Domain name, or IP address. It then parses those out into the variables $v_CURL_URLa, $v_DOMAINa, $v_IP_ADDRESSa, and $v_SERVER_PORTa.
### Optional: $2 can be "url", "domain", "port", or "ip". the function will exit after capturing the requested value
	fn_debug "fn_parse_server"
	local v_SERVER="$1"
	local v_TYPE=
	if [[ -n "$2" ]]; then
		v_TYPE="$2"
	fi

	v_CURL_URLa="false"
	v_DOMAINa="false"
	v_IP_ADDRESSa="false"
	v_SERVER_PORTa="false"
	if [[ -z "$v_SERVER" || "$v_SERVER" == "false" ]]; then
		return
	fi

	###Find basic details
	local v_UPPER="${v_SERVER^^}"
	if [[ "${v_UPPER:0:4}" != "HTTP" ]]; then
	### If what's passed doesn't start with http or https, we can straight away assume that it's on port 80
		v_DOMAINa="$v_SERVER"
		v_CURL_URLa="$v_SERVER"
		v_SERVER_PORTa="80"
	else
		### For the domain, get rid of "http(s)" at the beginning
		if [[ "${v_UPPER:0:5}" == "HTTPS" ]]; then
		### If it starts with https, assume port 443 and don't strip out the protocol from the URL
			v_DOMAINa="${v_SERVER:8}"
			v_CURL_URLa="$v_SERVER"
			v_SERVER_PORTa="443"
		else
		### Otherwise assume port 80, and we don't need the protocol in the URL
			v_DOMAINa="${v_SERVER:7}"
			v_CURL_URLa="$v_SERVER"
			v_SERVER_PORTa="80"
		fi
	fi
	if [[ "$v_TYPE" == "url" ]]; then
		if [[ "$b_DEBUG2" == true ]]; then
			echo -e "PASSED:     $1\nCURL_URL:   $v_CURL_URLa\n"
		fi
		return
	fi

	### At this point in the script, we have the beginnings of a domain, a curl URL and a port
	### for the domain: get rid of the slash and anything else that follows the domain name
	v_DOMAINa="${v_DOMAINa%%/*}"
#	v_DOMAINa="$( echo "$v_DOMAINa" | sed 's/[\xef\xbb\xbf]//g' )" ### <- Apparently billing is sometimes throwing special characters when you copy
	### If the domain contains a closing square bracket followed by a colon, then numbers, then the end of the string, it's likely an ipv6 address with a port on the end
	if [[ $( echo "$v_DOMAINa" | grep -E -c "]:[0-9]+$" ) -ne 0 ]]; then
		v_SERVER_PORTa="$( echo "$v_DOMAINa" | sed "s/^.*]:\([0-9][0-9]*\)$/\1/" )"
		v_DOMAINa="$( echo "$v_DOMAINa" | sed "s/^\[*\(.*\)]:[0-9][0-9]*$/\1/" )"
	### Note: the regex here only covers IPv6 addresses.
	elif [[ $( echo "$v_DOMAINa" | grep -E -c ":[0-9]+$" ) -ne 0 && $( echo "$v_DOMAINa" | grep -E -c "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$" ) -eq 0 ]]; then
	### If it doesn't match the above but it contains a colon, then numbers, then the end of the string, but is not a valid IPv6 address...
		v_SERVER_PORTa="${v_DOMAINa##*:}"
		v_DOMAINa="${v_DOMAINa%%:*}"
	fi
	if [[ "$v_TYPE" == "domain" ]]; then
		if [[ "$b_DEBUG2" == true ]]; then
			echo -e "PASSED:     $1\nCURL_URL:   $v_CURL_URLa\nDOMAIN:     $v_DOMAINa\n"
		fi
		return
	fi

	### If there was a port specified at the command line, let's use that.
	if [[ -n "$v_CL_PORT" ]]; then
		v_SERVER_PORTa="$v_CL_PORT"
	elif [[ "$v_RUN_TYPE" == "--ssh-load" ]]; then
		v_SERVER_PORTa="22"
	fi
	if [[ "$v_TYPE" == "port" ]]; then
		if [[ "$b_DEBUG2" == true ]]; then
			echo -e "PASSED:     $1\nCURL_URL:   $v_CURL_URLa\nDOMAIN:     $v_DOMAINa\nPORT:       $v_SERVER_PORTa\n"
		fi
		return
	fi

	### check if it's an IP. The following should match all IPv4 and IPv6 addresses
	if [[ $( echo "$v_DOMAINa" | grep -E -c "^((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$" ) -eq 0 ]]; then
	### If it doesn't look like an IP address, let's find out what the IP address REALLY is
		### Let's start by checking the hosts file
		local v_DOMAINa_EGREP_SAFE="$( fn_sanitize "$v_DOMAINa" )"
		if [[ $( sed "s/#.*$//" /etc/hosts | grep -E -c "[[:blank:]]$v_DOMAINa_EGREP_SAFE([[:blank:]]|$)" ) -gt 0 ]]; then
			v_IP_ADDRESSa="$( sed "s/#.*$//" /etc/hosts | grep -E "[[:blank:]]$v_DOMAINa_EGREP_SAFE([[:blank:]]|$)" | tail -n1 | awk '{print $1}' )"
		else
		### If it's not there, we'll dig for it.
			v_IP_ADDRESSa="$( dig +short "$v_DOMAINa" | sort -n | tail -n1 )"
		fi
		### If the result is empty, or doesn't match IPv4 or IPv6 addresses...
		if [[ -z "$v_IP_ADDRESSa" || $( echo "$v_IP_ADDRESSa" | grep -E -c "^((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$" ) -eq 0 ]]; then
			v_IP_ADDRESSa=false
		fi
	else
		v_IP_ADDRESSa="$v_DOMAINa"
	fi
	if [[ "$b_DEBUG2" == true ]]; then
		echo -e "PASSED:     $1\nCURL_URL:   $v_CURL_URLa\nDOMAIN:     $v_DOMAINa\nIP_ADDRESS: $v_IP_ADDRESSa\nPORT:       $v_SERVER_PORTa\n"
	fi
}
