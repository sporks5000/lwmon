#! /bin/bash

function fn_create_config {
fn_debug "fn_create_config"
touch "$f_CONF"
chmod 600 "$f_CONF"
cat << EOF > "$f_CONF"
# LWmon configuration file

# The "VERBOSITY" directive controls how verbose the output of the child processes is. 
# There are five options available: 1) "standard": Outputs whether any specific check has succeeded or failed. 2) "verbose": In addition to the information given from the standard output, also indicates how long checks for that job have been running, how many have been run, and the percentage of successful checks. 3) "more verbose": In addition to the information from "verbose" mode, information regarding how long checks are taking to complete will be output. 4) "change": Only outputs text on the first failure after any number of successes, or the first success after any number of failures. 5) "none": Child processes output no text.
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will immediately impact all child processes they don't have their own verbosity specifically set.
VERBOSITY = $v_DEFAULT_VERBOSITY

# The "EMAIL_ADDRESS" directive sets a default email address to which notifications will be sent for new jobs. If no address is set, no notifications will be sent.
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will only impact jobs that are created after the change is made.
EMAIL_ADDRESS = $v_DEFAULT_EMAIL_ADDRESS

# The "MAIL_DELAY" directive sets a default for how many passes or failures have to occur in a row before an email is sent. This is useful in that it's typical for a single failure after a string of several succeses to be a false positive, rather than an actual indicator of an issue.
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will only impact jobs that are created after the change is made.
MAIL_DELAY = $v_DEFAULT_MAIL_DELAY

# The "WAIT_SECONDS" directive sets a default number of seconds between each check that a job is doing. This does not include the amount of time that it takes for a check to complete - for example, it it takes three seconds to curl a page, and wait seconds is set at "10", it will take roughly thirteen seconds before the beginning of the next check.
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will only impact jobs that are created after the change is made.
WAIT_SECONDS = $v_DEFAULT_WAIT_SECONDS

# The "CHECK_TIMEOUT" directive sets a default for the number of seconds before a curl operation ends. This prevents the script from waiting an unreasonable amount of time between checks.
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will only impact jobs that are created after the change is made.
CHECK_TIMEOUT = $v_DEFAULT_CHECK_TIMEOUT

# The "OUTPUT_FILE" directive sets a default for where the results of child checks will be output. "/dev/stdout" indicates the standard out of the master process, and is typically the best place for this data to be pushed to. It can, however, be directed to a file, so that that file can be tailed by multiple users. this file HAS TO BE referenced by its full path.
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will only impact jobs that are created after the change is made.
OUTPUT_FILE = $v_DEFAULT_OUTPUT_FILE

# The "USER_AGENT" directive can be set to "true" or "false". For "true" the user agent string emulates chrome's user agent. For "false", the user agent string simply outputs the lwmon and curl versions.
# If this is set to something other than "true" or "false", what ever it's set to will be used as the user agent instead
# Note: This can also be set on a per-child basis
# Note: Changes to this directive will only impact jobs that are created after the change is made.
USER_AGENT = $v_DEFAULT_USER_AGENT

# When ever there is a change from success to failure on a URL monitoring job, a copy of the last successful curl result and the first failed curl result (with the associated error code) will be kept in the job's child directory. The "HTML_FILES_KEPT" directive controls the number of html files that are kept in addition to the results from the current and previous curls.
HTML_FILES_KEPT = $v_DEFAULT_HTML_FILES_KEPT

# One of the stats output in "more verbose" mode is how long the average recent check took - "recent" being within the last X checks. By default this number is 10, but that can be changed with the "NUM_DURATIONS_RECENT" directive.
NUM_DURATIONS_RECENT = $v_DEFAULT_NUM_DURATIONS_RECENT

# The "NUM_STATUSES_RECENT" and "NUM_STATUSES_NOT_SUCCESS" directives allow the user to configure the script to send email alerts when out of the X most recent statuses, Y of them are not a success. X being the value set for "NUM_STATUSES_RECENT" and Y being the value set for "NUM_STATUSES_NOT_SUCCESS".
# After an email has been sent indicating intermittent failures, there must be a number of successful checks equal to the number specified by "NUM_STATUSES_RECENT" before another success message will be sent
NUM_STATUSES_RECENT = $v_DEFAULT_NUM_STATUSES_RECENT
NUM_STATUSES_NOT_SUCCESS = $v_DEFAULT_NUM_STATUSES_NOT_SUCCESS

# For URL based jobs, it's possible to set a time limit for the process to be considered a "partial success" - Even if the curl process finished before it reaches "CHECK_TIMEOUT", the amount of time it look to complete took long enough that it should be brought to the user's attention.
CHECK_TIME_PARTIAL_SUCCESS = $v_DEFAULT_CHECK_TIME_PARTIAL_SUCCESS

# If the "LOG_DURATION_DATA" directive is set to "true", then the amount of time it takes for each check to complete will be output to the log file in the child directory.
LOG_DURATION_DATA = $v_DEFAULT_LOG_DURATION_DATA

# For URL jobs, when using curl and not wget: when the "CURL_VERBOSE" directive is set to "true", the script will capture the verbose output and append it to the end of the html file.
CURL_VERBOSE = $v_DEFAULT_CURL_VERBOSE

# For URL jobs, when curl is being used and not wget, if the "LOG_HTTP_CODE" directive is set to "true" the http return code will be logged in the log file for the child process.
LOG_HTTP_CODE = $v_DEFAULT_LOG_HTTP_CODE

# Setting the "USE_WGET" directive to "true" forces the script to use wget rather than curl to pull files. Curl is typically preferred as its behavior is slightly more predictable and its error output is slightly more specific.
USE_WGET = $v_DEFAULT_USE_WGET

# The "CUSTOM_MESSAGE" directive allows the user to specify custom information to send at the beginning of email messages. The string "\n" will be interpreted as a new line.
CUSTOM_MESSAGE = $v_DEFAULT_CUSTOM_MESSAGE

# By default, LWmon logs to ./lwmon.log. Setting the "LOG" directive allows you to specify a different full path for the log file.
LOG = $v_DEFAULT_LOG

# The "MAIL_COMMAND" directive allows the user to specify the command that will be used to send mail. This command will be interpreted with "eval". It allows for the following variables:
#     - $v_MESSAGE is the content of the message that will be sent (note that this will change based on if the message is for a success or a failure)
#     - $v_EMAIL_ADDRESS is the address to which the message will be sent
#     - $v_SUBJECT is the subject for the message (Note that this will change based on various aspects of the job)
# LWmon will only log that a mail message was sent if the exit code for the command given is "0", otherwise it will log that the message failed to send
# Note: If the permissions of the config file ever change from 600, instead of running the command given for this directive, LWmon will attempt to send mail via the default command
#     - This is to prevent a potential security compromise resulting from having this file edited by another user
# Note: If you are using the default vaules for this and mail is not sending, try adding the "-v" flag after "mail" to see the error output
MAIL_COMMAND = $v_DEFAULT_MAIL_COMMAND

# The "SSH_CONTROL_PATH" directive allows the user to specify where the control path socket file for an ssh-load job is located.
SSH_CONTROL_PATH = $v_DEFAULT_SSH_CONTROL_PATH

# The "COLOR_" and "RETURN_" directives allow the user to set specific strings that will be output before and after checks, depending on whether they're the first successful check, iterative successful checks, the first failed check, or iterative failed checks. This is designed to be used with bash color codes, but really anything that could be interpreted by "echo -e" can be used here.
COLOR_SUCCESS = $v_DEFAULT_COLOR_SUCCESS
COLOR_FIRST_SUCCESS = $v_DEFAULT_COLOR_FIRST_SUCCESS
COLOR_FAILURE = $v_DEFAULT_COLOR_FAILURE
COLOR_FIRST_FAILURE = $v_DEFAULT_COLOR_FIRST_FAILURE
COLOR_PARTIAL_SUCCESS = $v_DEFAULT_COLOR_PARTIAL_SUCCESS
COLOR_FIRST_PARTIAL_SUCCESS = $v_DEFAULT_COLOR_FIRST_PARTIAL_SUCCESS
RETURN_SUCCESS = $v_DEFAULT_RETURN_SUCCESS
RETURN_FIRST_SUCCESS = $v_DEFAULT_RETURN_FIRST_SUCCESS
RETURN_FAILURE = $v_DEFAULT_RETURN_FAILURE
RETURN_FIRST_FAILURE = $v_DEFAULT_RETURN_FIRST_FAILURE
RETURN_PARTIAL_SUCCESS = $v_DEFAULT_RETURN_PARTIAL_SUCCESS
RETURN_FIRST_PARTIAL_SUCCESS = $v_DEFAULT_RETURN_FIRST_PARTIAL_SUCCESS
EOF
#'do
echo -e "\e[1;32mA configuration file has been created at \"$f_CONF\". You totally want to check it out.\e[00m"
sleep 1
}
